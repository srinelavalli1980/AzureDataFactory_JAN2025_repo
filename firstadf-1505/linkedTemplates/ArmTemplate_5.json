{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "firstadf-1505"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/DS_SINK_SQLDBA_DF')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ONPREM_SQLDBA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_onprem_ss')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Source_onprem_Sqlserver",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "customer_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "first_name",
						"type": "nvarchar"
					},
					{
						"name": "last_name",
						"type": "nvarchar"
					},
					{
						"name": "email",
						"type": "nvarchar"
					},
					{
						"name": "created_at",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "updated_at",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Customers"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Conditional_Split')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ConditionalSplit",
								"type": "DatasetReference"
							},
							"name": "sourceconditionalsplit"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SINK_DF",
								"type": "DatasetReference"
							},
							"name": "sinkUSAUK"
						},
						{
							"dataset": {
								"referenceName": "DS_SINK_DF",
								"type": "DatasetReference"
							},
							"name": "sink2USAIND"
						},
						{
							"dataset": {
								"referenceName": "DS_SINK_DF",
								"type": "DatasetReference"
							},
							"name": "sink3Default"
						}
					],
					"transformations": [
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Row as short,",
						"          Country as string,",
						"          Year as integer,",
						"          Product_Type as string,",
						"          Sales as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceconditionalsplit",
						"sourceconditionalsplit split(Country == 'USA' || Country == 'UK',",
						"     Country == 'USA' || Country == 'IND',",
						"     disjoint: true) ~> split1@(USAUK, USAIND, Default)",
						"split1@USAUK sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['USAUK.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkUSAUK",
						"split1@USAIND sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['USAIND.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2USAIND",
						"split1@Default sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['ALL_Countries.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink3Default"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Data_Flow_Aggregation2002')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Sales_DF",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Sink_Database",
								"type": "DatasetReference"
							},
							"name": "sink1aggregatedata"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Country as string,",
						"          Year as short,",
						"          Product_Type as string,",
						"          Sales as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 aggregate(groupBy(Country),",
						"     MaxSales = max(Sales),",
						"          MinSales = min(Sales),",
						"          AvgSales = avg(Sales),",
						"          CountSales = count(Sales)) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1aggregatedata"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Exists')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Exxists_1",
								"type": "DatasetReference"
							},
							"name": "source1exist"
						},
						{
							"dataset": {
								"referenceName": "DS_UNION_2",
								"type": "DatasetReference"
							},
							"name": "source2exists"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Sink_exists",
								"type": "DatasetReference"
							},
							"name": "sink1exists"
						}
					],
					"transformations": [
						{
							"name": "exists1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmployeeID as integer,",
						"          EmployeeName as string,",
						"          Address as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1exist",
						"source(output(",
						"          EmployeeID as integer,",
						"          EmployeeName as string,",
						"          Address as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2exists",
						"source1exist, source2exists exists(source1exist@EmployeeID == source2exists@EmployeeID,",
						"     negate:false,",
						"     broadcast: 'auto')~> exists1",
						"exists1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SaleID as string,",
						"          { CustomerID} as string,",
						"          { SaleDate} as string,",
						"          { ProductID} as string,",
						"          { Quantity} as string,",
						"          { UnitPrice} as string,",
						"          { TotalAmount} as string,",
						"          CustomerID as string,",
						"          { CustomerName} as string,",
						"          { Email} as string,",
						"          { Phone} as string,",
						"          { Address} as string",
						"     ),",
						"     partitionFileNames:['Sinkexists.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1exists"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_First')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Source_DF",
								"type": "DatasetReference"
							},
							"name": "SalesData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SINK_DF",
								"type": "DatasetReference"
							},
							"name": "sinksales"
						}
					],
					"transformations": [
						{
							"name": "filtertrasformation"
						},
						{
							"name": "selecttrasforamtion"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Country as string,",
						"          Year as integer,",
						"          Product_Type as string,",
						"          Sales as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SalesData",
						"SalesData filter(Country == 'USA' && Product_Type  == 'electronics') ~> filtertrasformation",
						"filtertrasformation select(mapColumn(",
						"          Country,",
						"          Year,",
						"          Sales",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selecttrasforamtion",
						"selecttrasforamtion sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Salesdata.csv'],",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinksales"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_InnerJoin')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Sales_Join",
								"type": "DatasetReference"
							},
							"name": "Salesjoin"
						},
						{
							"dataset": {
								"referenceName": "DS_customer_join",
								"type": "DatasetReference"
							},
							"name": "customer"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Sink_InnerJoin",
								"type": "DatasetReference"
							},
							"name": "SinkInnerJoin"
						}
					],
					"transformations": [
						{
							"name": "innerjoin"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SaleID as short,",
						"          { CustomerID} as integer,",
						"          { SaleDate} as string,",
						"          { ProductID} as short,",
						"          { Quantity} as short,",
						"          { UnitPrice} as double,",
						"          { TotalAmount} as double",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Salesjoin",
						"source(output(",
						"          CustomerID as integer,",
						"          { CustomerName} as string,",
						"          { Email} as string,",
						"          { Phone} as string,",
						"          { Address} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> customer",
						"Salesjoin, customer join({ CustomerID} == CustomerID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> innerjoin",
						"innerjoin sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Salesjoincustomer.csv'],",
						"     truncate: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> SinkInnerJoin"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Moviedata_Activity')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Moviedata",
								"type": "DatasetReference"
							},
							"name": "sourceofMoviedata"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_cloudDBA",
								"type": "DatasetReference"
							},
							"name": "sink1stream",
							"rejectedDataLinkedService": {
								"referenceName": "LS_attach_file",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "selectMovie"
						},
						{
							"name": "filter1movie"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "rankstream"
						},
						{
							"name": "aggregatestreem"
						},
						{
							"name": "assertstream"
						},
						{
							"name": "alterRow1stream"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie as string,",
						"          title as string,",
						"          genres as string,",
						"          year as integer,",
						"          Rating as short,",
						"          {Rotton Tomato} as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     moveFiles: ['moviefile','archive']) ~> sourceofMoviedata",
						"sourceofMoviedata select(mapColumn(",
						"          movie,",
						"          title,",
						"          genres,",
						"          year,",
						"          {Rotten Tomato} = {Rotton Tomato}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectMovie",
						"selectMovie filter(year>1910 && year<2000) ~> filter1movie",
						"filter1movie derive(Primery_genres = iif(instr(genres,'|') > 0, substring(genres,1,instr(genres,'|')-1), genres)) ~> derivedColumn1",
						"derivedColumn1 window(over(year,",
						"          Primery_genres),",
						"     desc({Rotten Tomato}, true),",
						"     rank = rank()) ~> rankstream",
						"rankstream aggregate(groupBy(year,",
						"          Primery_genres),",
						"     avg = avg({Rotten Tomato}),",
						"          max = max({Rotten Tomato}),",
						"          min = min({Rotten Tomato}),",
						"          count = count({Rotten Tomato})) ~> aggregatestreem",
						"aggregatestreem assert(expectTrue(year>1920, false, 'assert1', null, 'Validate year greater than 1950')) ~> assertstream",
						"assertstream alterRow(insertIf(true())) ~> alterRow1stream",
						"alterRow1stream sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     outputAssertFailedRows: true,",
						"     assertFailure_container: 'error-log',",
						"     ignoreAssertFailedRows: true,",
						"     mapColumn(",
						"          year,",
						"          Primery_genres,",
						"          avg,",
						"          max,",
						"          min,",
						"          count",
						"     )) ~> sink1stream"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Pivot')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQLDBA_Dev",
								"type": "DatasetReference"
							},
							"name": "source1Pivot"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Sink_pivot",
								"type": "DatasetReference"
							},
							"name": "sink1pivot"
						}
					],
					"transformations": [
						{
							"name": "pivot1transformation"
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(8,2),",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          ThumbNailPhoto as binary,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1Pivot",
						"derivedColumn1 pivot(groupBy(Size),",
						"     pivotBy(Color),",
						"     avg = avg(StandardCost),",
						"     columnNaming: '$N_$V_is calculated',",
						"     lateral: true) ~> pivot1transformation",
						"source1Pivot derive(Color = iif(isNull(Color) || Color == 'NULL', 'NA',Color),",
						"          Size = iif(isNull(Size) || Size == 'NULL', 'NA',Size)) ~> derivedColumn1",
						"pivot1transformation sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['PivotData.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1pivot"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_SQLDBA_JOIN')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SQLDBA_DF",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "DS_2nd_sqldb_DF",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_ONPREM_SINK_2102",
								"type": "DatasetReference"
							},
							"name": "sink1",
							"rejectedDataLinkedService": {
								"referenceName": "LS_ADLS_metadata",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(8,2),",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          ThumbNailPhoto as binary,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          ProductCategoryID as integer,",
						"          ParentProductCategoryID as integer,",
						"          Name as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"source1, source2 join(source1@ProductCategoryID == source2@ProductCategoryID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          ProductID,",
						"          Name = source1@Name,",
						"          ProductNumber,",
						"          Shades = Color,",
						"          StandardCost,",
						"          ListPrice,",
						"          Size,",
						"          Weight,",
						"          ProductCategoryID = source1@ProductCategoryID,",
						"          ProductModelID,",
						"          SellStartDate,",
						"          SellEndDate,",
						"          DiscontinuedDate,",
						"          ThumbNailPhoto,",
						"          ThumbnailPhotoFileName,",
						"          rowguid = source1@rowguid,",
						"          ModifiedDate = source1@ModifiedDate,",
						"          ProductCategoryID = source2@ProductCategoryID,",
						"          ParentProductCategoryID,",
						"          Name = source2@Name,",
						"          rowguid = source2@rowguid,",
						"          ModifiedDate = source2@ModifiedDate",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'allErrors',",
						"     transactionCommit: 'single',",
						"     reportSuccessOnError: false,",
						"     outputAssertFailedRows: true,",
						"     assertFailure_fileSystem: 'raw',",
						"     assertFailure_folderPath: 'reject') ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Second_1502')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Source_DF",
								"type": "DatasetReference"
							},
							"name": "Sales"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SINK_DF",
								"type": "DatasetReference"
							},
							"name": "sinkdata"
						}
					],
					"transformations": [
						{
							"name": "aggregateMinandMax"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Country as string,",
						"          Year as integer,",
						"          Product_Type as string,",
						"          Sales as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Sales",
						"Sales aggregate(groupBy(Country),",
						"     MinSales = min(Sales),",
						"          MaxSales = max(Sales),",
						"          SumofSales = sum(Sales),",
						"          AvgofSales = avg(Sales),",
						"          CountofSales = count(Sales)) ~> aggregateMinandMax",
						"aggregateMinandMax sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Aggregatedata'],",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkdata"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Transformations_split')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_split_1902",
								"type": "DatasetReference"
							},
							"name": "sourcesplit"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_USAUK",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "DS_USAIND",
								"type": "DatasetReference"
							},
							"name": "sink2"
						},
						{
							"dataset": {
								"referenceName": "DS_Default",
								"type": "DatasetReference"
							},
							"name": "sink3"
						}
					],
					"transformations": [
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Row as string,",
						"          Country as string,",
						"          Year as string,",
						"          Product_Type as string,",
						"          Sales as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourcesplit",
						"sourcesplit split(Country == 'USA' || Country == 'UK',",
						"     Country == 'USA' || Country == 'IND',",
						"     disjoint: true) ~> split1@(USAUK, USAIND, Default)",
						"split1@USAUK sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['sink1.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"split1@USAIND sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['sink2.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2",
						"split1@Default sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['sink3.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink3"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_UNION')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_union_input1",
								"type": "DatasetReference"
							},
							"name": "Splitdata"
						},
						{
							"dataset": {
								"referenceName": "DS_UNION_2",
								"type": "DatasetReference"
							},
							"name": "Union2employee"
						},
						{
							"dataset": {
								"referenceName": "DS_union_input",
								"type": "DatasetReference"
							},
							"name": "union3"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Sink_Union",
								"type": "DatasetReference"
							},
							"name": "sinkunion"
						}
					],
					"transformations": [
						{
							"name": "Union"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmployeeID as string,",
						"          EmployeeName as string,",
						"          Address as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Splitdata",
						"source(output(",
						"          EmployeeID as string,",
						"          EmployeeName as string,",
						"          Address as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Union2employee",
						"source(output(",
						"          Row as string,",
						"          Country as string,",
						"          Year as string,",
						"          Product_Type as string,",
						"          Sales as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> union3",
						"Splitdata, Union2employee, union3 union(byName: true)~> Union",
						"Union sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SaleID as string,",
						"          { CustomerID} as string,",
						"          { SaleDate} as string,",
						"          { ProductID} as string,",
						"          { Quantity} as string,",
						"          { UnitPrice} as string,",
						"          { TotalAmount} as string,",
						"          CustomerID as string,",
						"          { CustomerName} as string,",
						"          { Email} as string,",
						"          { Phone} as string,",
						"          { Address} as string",
						"     ),",
						"     partitionFileNames:['SinkUnion.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkunion"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_derive_column')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_SRC_DC",
								"type": "DatasetReference"
							},
							"name": "source1derivecol"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SINK_Derivedcolumn",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Row as integer,",
						"          Country as string,",
						"          Sales as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1derivecol",
						"source1derivecol derive(year = replace(substring(Country, instr(Country,'(') +1 , length(trim(Country))-2),')',''),",
						"          country = toString(left(Country,length(Country)-6))) ~> derivedColumn1",
						"derivedColumn1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['derivedcolumn.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Aggregation')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_Data_Flow_Aggregation2002",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Data_Flow_Aggregation2002",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1aggregatedata": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Data_Flow_Aggregation2002')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Copy_activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data using query",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select * from Customers where updated_at > '2025-02-05 13:26:55.093'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"customer_id"
									]
								},
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_onprem_ss",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_azure_cloud_ss",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-06T15:59:55Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_onprem_ss')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Copy_activity_WM_Parameter_using_File')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach Table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "get_Metadata_lookup",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('get_Metadata_lookup').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data using query",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "get_NEWWM",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "get_OLDWM",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select * from @{item().TABLE_NAME} where @{item().WaterMark_Column}  > '@{activity('get_OLDWM').output.firstRow.OLDWM}' and @{item().WaterMark_Column}  <= '@{activity('get_NEWWM').output.firstRow.NEWWM}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"isolationLevel": "Serializable",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "upsert",
											"upsertSettings": {
												"useTempDB": true,
												"keys": {
													"value": "@item().MERGE_KEY",
													"type": "Expression"
												}
											},
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_onprem_ss",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_azure_cloud_ss_parameter",
											"type": "DatasetReference",
											"parameters": {
												"SINK_TABLE_NAME": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "get_OLDWM",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select WatermarkValue as OLDWM from watermarktable where TableName = '@{item().TABLE_NAME}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_azure_cloud_ss_parameter",
											"type": "DatasetReference",
											"parameters": {
												"SINK_TABLE_NAME": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "get_NEWWM",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select max(@{item().WaterMark_Column}) as NEWWM from @{item().TABLE_NAME}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_onprem_ss",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "SP_WM_Update",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy data using query",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[usp_write_watermark]",
										"storedProcedureParameters": {
											"LastModifiedtime": {
												"value": {
													"value": "@{activity('get_NEWWM').output.firstRow.NEWWM}",
													"type": "Expression"
												},
												"type": "Datetime"
											},
											"TableName": {
												"value": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_TGT_Cloud_Sqlserver",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "get_Metadata_lookup",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DS_Metadata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-07T04:06:31Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_onprem_ss')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Copy_activity_using_watermark')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data using query",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "get_OLDWM",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "get_NEWWM",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": {
									"value": "select * from Customers where updated_at > '@{activity('get_OLDWM').output.firstRow.OLDWM}' and updated_at <= '@{activity('get_NEWWM').output.firstRow.NEWWM}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"customer_id"
									]
								},
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_onprem_ss",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_azure_cloud_ss",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "get_OLDWM",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select WatermarkValue from watermarktable where TableName = 'CUSTOMERS'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_azure_cloud_ss",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "get_NEWWM",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select * from customers",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_onprem_ss",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "SP_WM_Update",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy data using query",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_write_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@activity('get_NEWWM').output.firstRow.NEWWM",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"TableName": {
									"value": "CUSTOMERS",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_TGT_Cloud_Sqlserver",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-13T08:03:01Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_onprem_ss')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Copy_activity_using_watermark_Parameter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach Table",
						"type": "ForEach",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@pipeline().parameters.TableList",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data using query",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "get_NEWWM",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "get_OLDWM",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select * from @{item().TABLE_NAME} where @{item().WaterMark_Column}  > '@{activity('get_OLDWM').output.firstRow.OLDWM}' and @{item().WaterMark_Column}  <= '@{activity('get_NEWWM').output.firstRow.NEWWM}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"isolationLevel": "Serializable",
											"partitionOption": "None"
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "upsert",
											"upsertSettings": {
												"useTempDB": true,
												"keys": {
													"value": "@item().MERGE_KEY",
													"type": "Expression"
												}
											},
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_onprem_ss",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_azure_cloud_ss_parameter",
											"type": "DatasetReference",
											"parameters": {
												"SINK_TABLE_NAME": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "get_OLDWM",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select WatermarkValue as OLDWM from watermarktable where TableName = '@{item().TABLE_NAME}'",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_azure_cloud_ss_parameter",
											"type": "DatasetReference",
											"parameters": {
												"SINK_TABLE_NAME": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												}
											}
										}
									}
								},
								{
									"name": "get_NEWWM",
									"type": "Lookup",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "SqlServerSource",
											"sqlReaderQuery": {
												"value": "select max(@{item().WaterMark_Column}) as NEWWM from @{item().TABLE_NAME}",
												"type": "Expression"
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"dataset": {
											"referenceName": "DS_onprem_ss",
											"type": "DatasetReference",
											"parameters": {}
										}
									}
								},
								{
									"name": "SP_WM_Update",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "Copy data using query",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[usp_write_watermark]",
										"storedProcedureParameters": {
											"LastModifiedtime": {
												"value": {
													"value": "@{activity('get_NEWWM').output.firstRow.NEWWM}",
													"type": "Expression"
												},
												"type": "Datetime"
											},
											"TableName": {
												"value": {
													"value": "@{item().TABLE_NAME}",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "LS_TGT_Cloud_Sqlserver",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"TableList": {
						"type": "array",
						"defaultValue": [
							{
								"TABLE_NAME": "CATEGORIES",
								"WaterMark_Column": "updated_at",
								"MERGE_KEY": [
									"category_id"
								]
							},
							{
								"TABLE_NAME": "CUSTOMERS",
								"WaterMark_Column": "updated_at",
								"MERGE_KEY": [
									"customer_id"
								]
							}
						]
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-06T18:26:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_onprem_ss')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_DF_Aggregate')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "DF_Second_1502",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "DF_Second_1502",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Sales": {},
									"sinkdata": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-15T03:11:36Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/DF_Second_1502')]"
			]
		}
	]
}