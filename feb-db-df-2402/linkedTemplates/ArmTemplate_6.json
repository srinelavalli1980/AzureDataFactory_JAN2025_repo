{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "feb-db-df-2402"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/PL_File_Type_Load_copy_switch')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata for files",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Input_csv",
								"type": "DatasetReference",
								"parameters": {
									"container": "raw"
								}
							},
							"fieldList": [
								"exists",
								"itemName",
								"itemType",
								"lastModified",
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach File type",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata for files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata for files').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Switch files to different folders",
									"type": "Switch",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"on": {
											"value": "@{split(item().name,'.')[1]}",
											"type": "Expression"
										},
										"cases": [
											{
												"value": "CSV",
												"activities": [
													{
														"name": "Copy data of  CSV_copy",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"wildcardFileName": {
																		"value": "*CSV",
																		"type": "Expression"
																	},
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings",
																	"copyBehavior": "PreserveHierarchy"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".csv"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "DS_Input_csv",
																"type": "DatasetReference",
																"parameters": {
																	"container": "raw"
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DS_Input_csv",
																"type": "DatasetReference",
																"parameters": {
																	"container": "silver/CSV"
																}
															}
														]
													}
												]
											},
											{
												"value": "json",
												"activities": [
													{
														"name": "Copy data of  JSON_copy1",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "JsonSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"wildcardFileName": {
																		"value": "*json",
																		"type": "Expression"
																	},
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "JsonReadSettings"
																}
															},
															"sink": {
																"type": "JsonSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings",
																	"copyBehavior": "PreserveHierarchy"
																},
																"formatSettings": {
																	"type": "JsonWriteSettings"
																}
															},
															"enableStaging": false
														},
														"inputs": [
															{
																"referenceName": "DS_JSON",
																"type": "DatasetReference",
																"parameters": {
																	"container_tgt": "raw"
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DS_JSON",
																"type": "DatasetReference",
																"parameters": {
																	"container_tgt": "silver/JSON"
																}
															}
														]
													}
												]
											},
											{
												"value": "txt",
												"activities": [
													{
														"name": "Copy data of  TXT",
														"type": "Copy",
														"dependsOn": [],
														"policy": {
															"timeout": "0.12:00:00",
															"retry": 0,
															"retryIntervalInSeconds": 30,
															"secureOutput": false,
															"secureInput": false
														},
														"userProperties": [],
														"typeProperties": {
															"source": {
																"type": "DelimitedTextSource",
																"storeSettings": {
																	"type": "AzureBlobFSReadSettings",
																	"recursive": true,
																	"wildcardFileName": {
																		"value": "*txt",
																		"type": "Expression"
																	},
																	"enablePartitionDiscovery": false
																},
																"formatSettings": {
																	"type": "DelimitedTextReadSettings"
																}
															},
															"sink": {
																"type": "DelimitedTextSink",
																"storeSettings": {
																	"type": "AzureBlobFSWriteSettings",
																	"copyBehavior": "PreserveHierarchy"
																},
																"formatSettings": {
																	"type": "DelimitedTextWriteSettings",
																	"quoteAllText": true,
																	"fileExtension": ".txt"
																}
															},
															"enableStaging": false,
															"translator": {
																"type": "TabularTranslator",
																"typeConversion": true,
																"typeConversionSettings": {
																	"allowDataTruncation": true,
																	"treatBooleanAsNumber": false
																}
															}
														},
														"inputs": [
															{
																"referenceName": "DS_Input_csv",
																"type": "DatasetReference",
																"parameters": {
																	"container": "raw"
																}
															}
														],
														"outputs": [
															{
																"referenceName": "DS_Input_csv",
																"type": "DatasetReference",
																"parameters": {
																	"container": "silver/TXT"
																}
															}
														]
													}
												]
											}
										],
										"defaultActivities": [
											{
												"name": "Copy data of  DOCX",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "DelimitedTextSource",
														"storeSettings": {
															"type": "AzureBlobFSReadSettings",
															"recursive": true,
															"modifiedDatetimeStart": null,
															"modifiedDatetimeEnd": null,
															"wildcardFileName": {
																"value": "*docx",
																"type": "Expression"
															},
															"enablePartitionDiscovery": false
														},
														"formatSettings": {
															"type": "DelimitedTextReadSettings"
														}
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings",
															"copyBehavior": "PreserveHierarchy"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".docx"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_Input_csv",
														"type": "DatasetReference",
														"parameters": {
															"container": "raw"
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_Input_csv",
														"type": "DatasetReference",
														"parameters": {
															"container": "silver/DOCX"
														}
													}
												]
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-12T08:40:41Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_HTTP_Health_2002')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Healthcare",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DS_Json_Healthcare",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach record",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Healthcare",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Healthcare').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data Movies",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings",
												"copyBehavior": "FlattenHierarchy"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_HTTP_File",
											"type": "DatasetReference",
											"parameters": {
												"SourceBaseUrl": {
													"value": "@item().SourceBaseUrl",
													"type": "Expression"
												},
												"SourceRelativeUrl": {
													"value": "@item().SourceRelativeUrl",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_Sink_Movies",
											"type": "DatasetReference",
											"parameters": {
												"SinkFileName": {
													"value": "@item().SinkFile",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_HTTP_MovieFile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Moviefile",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DS_Json_Healthcare",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach record",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Moviefile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Moviefile').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data Movies",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings",
												"copyBehavior": "FlattenHierarchy"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_HTTP_File",
											"type": "DatasetReference",
											"parameters": {
												"SourceBaseUrl": {
													"value": "@item().SourceBaseUrl",
													"type": "Expression"
												},
												"SourceRelativeUrl": {
													"value": "@item().SourceRelativeUrl",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_Sink_Movies",
											"type": "DatasetReference",
											"parameters": {
												"SinkFileName": {
													"value": "@item().SinkFile",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Health_HTTP_ADLS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup data config",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DS_Config_read",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach record",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup data config",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup data config').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings",
												"copyBehavior": "PreserveHierarchy"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_DATSET",
											"type": "DatasetReference",
											"parameters": {
												"SourceRelativeUrl": {
													"value": "@item().SourceBaseUrl",
													"type": "Expression"
												},
												"SourceBaseUrl": {
													"value": "@item().SourceRelativeUrl",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_Sink_Health_out",
											"type": "DatasetReference",
											"parameters": {
												"Sinkfilename": {
													"value": "@item().SinkFile",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Healthcare')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup for each file",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DS_Config_Health",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup for each file",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup for each file').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1 from HTTP to ADLS Gen2",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings",
												"copyBehavior": "PreserveHierarchy"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_Http_Source",
											"type": "DatasetReference",
											"parameters": {
												"SourceBaseUrl": {
													"value": "@item().SourceBaseUrl",
													"type": "Expression"
												},
												"SourceRelativeUrl": {
													"value": "@item().SourceRelativeUrl",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_Sink_Health",
											"type": "DatasetReference",
											"parameters": {
												"SinkFileName": {
													"value": "@item().SinkFile",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Hospital_Metadata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup hospital data json",
						"description": "24th Feb Metadata",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"dataset": {
								"referenceName": "DS_Hospital_Metadata",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach1 JSON",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup hospital data json",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup hospital data json').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data of the files",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "HttpReadSettings",
												"requestMethod": "GET"
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings",
												"copyBehavior": "FlattenHierarchy"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_Health_JSON_Http",
											"type": "DatasetReference",
											"parameters": {
												"SourceBaseUrl": {
													"value": "@item().SourceBaseUrl",
													"type": "Expression"
												},
												"SourceRelativeUrl": {
													"value": "@item().SourceRelativeUrl",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_OUTPUT_Health_Json",
											"type": "DatasetReference",
											"parameters": {
												"container": "output-sink",
												"file_name": {
													"value": "@item().SinkFile",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_LOG_Information')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data from raw to silver",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"wildcardFileName": "*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Input_csv",
								"type": "DatasetReference",
								"parameters": {
									"container": "raw"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Input_csv",
								"type": "DatasetReference",
								"parameters": {
									"container": "silver"
								}
							}
						]
					},
					{
						"name": "logs",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data from raw to silver",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "JsonSource",
								"additionalColumns": [
									{
										"name": "pipelineid",
										"value": {
											"value": "@pipeline().RunId",
											"type": "Expression"
										}
									},
									{
										"name": "pipelinename",
										"value": {
											"value": "@pipeline().Pipeline",
											"type": "Expression"
										}
									}
								],
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "JsonReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "PreserveHierarchy"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"logSettings": {
								"enableCopyActivityLog": true,
								"copyActivityLogSettings": {
									"logLevel": "Info",
									"enableReliableLogging": false
								},
								"logLocationSettings": {
									"linkedServiceName": {
										"referenceName": "LS_log_json",
										"type": "LinkedServiceReference"
									},
									"path": "raw/silver"
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_log_Json",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_multi_file",
								"type": "DatasetReference",
								"parameters": {
									"p_folder": "silver"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-12T10:21:00Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Miini_project')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LK_Metada_mimi",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from METADATA",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_SQLDBA_mini",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Table",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "LK_Metada_mimi",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('LK_Metada_mimi').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metada",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_metadata_exists",
											"type": "DatasetReference",
											"parameters": {
												"SCHEMA_NAME": {
													"value": "@item().SCHEMANAME",
													"type": "Expression"
												},
												"TABLE_NAME": {
													"value": "@item().TABLENAME",
													"type": "Expression"
												}
											}
										},
										"fieldList": [
											"exists"
										]
									}
								},
								{
									"name": "If Condition exists",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metada",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@activity('Get Metada').output.exists",
											"type": "Expression"
										},
										"ifFalseActivities": [
											{
												"name": "Wait1",
												"type": "Wait",
												"dependsOn": [],
												"userProperties": [],
												"typeProperties": {
													"waitTimeInSeconds": 2
												}
											}
										],
										"ifTrueActivities": [
											{
												"name": "Copy data from SRC to TGT",
												"type": "Copy",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"source": {
														"type": "AzureSqlSource",
														"queryTimeout": "02:00:00",
														"partitionOption": "None"
													},
													"sink": {
														"type": "DelimitedTextSink",
														"storeSettings": {
															"type": "AzureBlobFSWriteSettings",
															"copyBehavior": "PreserveHierarchy"
														},
														"formatSettings": {
															"type": "DelimitedTextWriteSettings",
															"quoteAllText": true,
															"fileExtension": ".csv"
														}
													},
													"enableStaging": false,
													"translator": {
														"type": "TabularTranslator",
														"typeConversion": true,
														"typeConversionSettings": {
															"allowDataTruncation": true,
															"treatBooleanAsNumber": false
														}
													}
												},
												"inputs": [
													{
														"referenceName": "DS_metadata_exists",
														"type": "DatasetReference",
														"parameters": {
															"SCHEMA_NAME": {
																"value": "@item().SCHEMANAME",
																"type": "Expression"
															},
															"TABLE_NAME": {
																"value": "@item().TABLENAME",
																"type": "Expression"
															}
														}
													}
												],
												"outputs": [
													{
														"referenceName": "DS_Tatget_mimi",
														"type": "DatasetReference",
														"parameters": {}
													}
												]
											},
											{
												"name": "Stored procedure Success",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Copy data from SRC to TGT",
														"dependencyConditions": [
															"Succeeded"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[PIPELINE_LOG_USP]",
													"storedProcedureParameters": {
														"COPYACTIVITY_END_TIME": {
															"value": {
																"value": "@activity('Copy data from SRC to TGT').ExecutionEndTime ",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"COPYACTIVITY_START_TIME": {
															"value": {
																"value": "@activity('Copy data from SRC to TGT').ExecutionStartTime ",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"COPYDURATION_IN_SECS": {
															"value": {
																"value": "@activity('Copy data from SRC to TGT').output.copyDuration",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"DATAFACTORY_NAME": {
															"value": {
																"value": "@pipeline().DataFactory ",
																"type": "Expression"
															},
															"type": "String"
														},
														"DESTINATION": {
															"value": {
																"value": "@item().blobcontainer ",
																"type": "Expression"
															},
															"type": "String"
														},
														"EFFECTIVEINTERGATIONRUNTIME": {
															"value": {
																"value": "@activity('Copy data from SRC to TGT').output.effectiveIntegrationRuntime ",
																"type": "Expression"
															},
															"type": "String"
														},
														"ERROR_MESSAGE": {
															"value": {
																"value": "@activity('Copy data from SRC to TGT').error ",
																"type": "Expression"
															},
															"type": "String"
														},
														"EXECUTION_STATUS": {
															"value": {
																"value": "@activity('Copy data from SRC to TGT').status ",
																"type": "Expression"
															},
															"type": "String"
														},
														"EXECUTION_STATUS_CODE": {
															"value": {
																"value": "@activity('Copy data from SRC to TGT').statuscode",
																"type": "Expression"
															},
															"type": "String"
														},
														"NO_PARALLELCOPIES": {
															"value": {
																"value": "@activity('Copy data from SRC to TGT').output.usedParallelCopies ",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"PIPELINENAME": {
															"value": {
																"value": "@pipeline().Pipeline ",
																"type": "Expression"
															},
															"type": "String"
														},
														"ROWSCOPIED": {
															"value": {
																"value": "@activity('Copy data from SRC to TGT').output.rowscopied ",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"ROWSREAD": {
															"value": {
																"value": "@activity('Copy data from SRC to TGT').output.rowsread ",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"RUNID": {
															"value": null,
															"type": "String"
														},
														"SINK_TYPE": {
															"value": {
																"value": "@activity('Copy data from SRC to TGT').output.executiondetails[0].sink.type ",
																"type": "Expression"
															},
															"type": "String"
														},
														"SOURCE": {
															"value": {
																"value": "@item().tablename",
																"type": "Expression"
															},
															"type": "String"
														},
														"SOURCE_TYPE": {
															"value": {
																"value": "@activity('Copy data from SRC to TGT').output.executiondetails[0].source.type ",
																"type": "Expression"
															},
															"type": "String"
														},
														"TRIGGERID": {
															"value": {
																"value": "@pipeline().TriggerId ",
																"type": "Expression"
															},
															"type": "String"
														},
														"TRIGGERNAME": {
															"value": {
																"value": "@pipeline().TriggerName ",
																"type": "Expression"
															},
															"type": "String"
														},
														"TRIGGERTIME": {
															"value": {
																"value": "@pipeline().TriggerTime ",
																"type": "Expression"
															},
															"type": "String"
														},
														"TRIGGERTYPE": {
															"value": {
																"value": "@pipeline().TriggerType",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_SQLDBA_mini",
													"type": "LinkedServiceReference"
												}
											},
											{
												"name": "Stored procedure Failure",
												"type": "SqlServerStoredProcedure",
												"dependsOn": [
													{
														"activity": "Copy data from SRC to TGT",
														"dependencyConditions": [
															"Failed"
														]
													}
												],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"storedProcedureName": "[[dbo].[PIPELINE_LOG_USP]",
													"storedProcedureParameters": {
														"COPYACTIVITY_END_TIME": {
															"value": {
																"value": "@activity('Copy data from SRC to TGT').ExecutionEndTime ",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"COPYACTIVITY_START_TIME": {
															"value": {
																"value": "@activity('Copy data from SRC to TGT').ExecutionStartTime ",
																"type": "Expression"
															},
															"type": "DateTime"
														},
														"COPYDURATION_IN_SECS": {
															"value": {
																"value": "@activity('Copy data from SRC to TGT').output.copyDuration",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"DATAFACTORY_NAME": {
															"value": {
																"value": "@pipeline().DataFactory ",
																"type": "Expression"
															},
															"type": "String"
														},
														"DESTINATION": {
															"value": {
																"value": "@item().blobcontainer ",
																"type": "Expression"
															},
															"type": "String"
														},
														"EFFECTIVEINTERGATIONRUNTIME": {
															"value": {
																"value": "@activity('Copy data from SRC to TGT').output.effectiveIntegrationRuntime ",
																"type": "Expression"
															},
															"type": "String"
														},
														"ERROR_MESSAGE": {
															"value": {
																"value": "@activity('Copy data from SRC to TGT').error ",
																"type": "Expression"
															},
															"type": "String"
														},
														"EXECUTION_STATUS": {
															"value": {
																"value": "@activity('Copy data from SRC to TGT').status ",
																"type": "Expression"
															},
															"type": "String"
														},
														"EXECUTION_STATUS_CODE": {
															"value": {
																"value": "@activity('Copy data from SRC to TGT').statuscode",
																"type": "Expression"
															},
															"type": "String"
														},
														"NO_PARALLELCOPIES": {
															"value": {
																"value": "@activity('Copy data from SRC to TGT').output.usedParallelCopies ",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"PIPELINENAME": {
															"value": {
																"value": "@pipeline().Pipeline ",
																"type": "Expression"
															},
															"type": "String"
														},
														"ROWSCOPIED": {
															"value": {
																"value": "@activity('Copy data from SRC to TGT').output.rowscopied ",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"ROWSREAD": {
															"value": {
																"value": "@activity('Copy data from SRC to TGT').output.rowsread ",
																"type": "Expression"
															},
															"type": "Int32"
														},
														"RUNID": {
															"value": null,
															"type": "String"
														},
														"SINK_TYPE": {
															"value": {
																"value": "@activity('Copy data from SRC to TGT').output.executiondetails[0].sink.type ",
																"type": "Expression"
															},
															"type": "String"
														},
														"SOURCE": {
															"value": {
																"value": "@item().tablename",
																"type": "Expression"
															},
															"type": "String"
														},
														"SOURCE_TYPE": {
															"value": {
																"value": "@activity('Copy data from SRC to TGT').output.executiondetails[0].source.type ",
																"type": "Expression"
															},
															"type": "String"
														},
														"TRIGGERID": {
															"value": {
																"value": "@pipeline().TriggerId ",
																"type": "Expression"
															},
															"type": "String"
														},
														"TRIGGERNAME": {
															"value": {
																"value": "@pipeline().TriggerName ",
																"type": "Expression"
															},
															"type": "String"
														},
														"TRIGGERTIME": {
															"value": {
																"value": "@pipeline().TriggerTime ",
																"type": "Expression"
															},
															"type": "String"
														},
														"TRIGGERTYPE": {
															"value": {
																"value": "@pipeline().TriggerType",
																"type": "Expression"
															},
															"type": "String"
														}
													}
												},
												"linkedServiceName": {
													"referenceName": "LS_SQLDBA_mini",
													"type": "LinkedServiceReference"
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-08T13:49:46Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Number_of_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_multi_file",
								"type": "DatasetReference",
								"parameters": {
									"p_folder": "triggerdata"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Append variable1",
									"type": "AppendVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "file_name",
										"value": {
											"value": "@{item().name}",
											"type": "Expression"
										}
									}
								}
							]
						}
					},
					{
						"name": "Set variable1",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "no_of_files",
							"value": {
								"value": "@length(variables('file_name'))",
								"type": "Expression"
							}
						}
					},
					{
						"name": "Set variable names",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ForEach1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"variableName": "file_name_quated",
							"value": {
								"value": "@variables('file_name')",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"file_name": {
						"type": "Array"
					},
					"no_of_files": {
						"type": "Integer"
					},
					"file_name_quated": {
						"type": "Array"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-12T06:44:45Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_Validate_count')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Validation1",
						"type": "Validation",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_BLOB_Validate",
								"type": "DatasetReference",
								"parameters": {}
							},
							"timeout": "0.00:30:00",
							"sleep": 10
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_delete_old_files')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_multi_file",
								"type": "DatasetReference",
								"parameters": {
									"p_folder": "triggerdata"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach file",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Get Metadata2",
									"type": "GetMetadata",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"dataset": {
											"referenceName": "DS_multi_file",
											"type": "DatasetReference",
											"parameters": {
												"p_folder": "triggerdata"
											}
										},
										"fieldList": [
											"lastModified"
										],
										"storeSettings": {
											"type": "AzureBlobFSReadSettings",
											"recursive": true,
											"enablePartitionDiscovery": false
										},
										"formatSettings": {
											"type": "DelimitedTextReadSettings"
										}
									}
								},
								{
									"name": "If Condition1",
									"type": "IfCondition",
									"dependsOn": [
										{
											"activity": "Get Metadata2",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"userProperties": [],
									"typeProperties": {
										"expression": {
											"value": "@activity('Get Metadata2').output.lastModified",
											"type": "Expression"
										},
										"ifTrueActivities": [
											{
												"name": "Delete1",
												"type": "Delete",
												"dependsOn": [],
												"policy": {
													"timeout": "0.12:00:00",
													"retry": 0,
													"retryIntervalInSeconds": 30,
													"secureOutput": false,
													"secureInput": false
												},
												"userProperties": [],
												"typeProperties": {
													"dataset": {
														"referenceName": "DS_multi_file",
														"type": "DatasetReference",
														"parameters": {
															"p_folder": "triggerdata"
														}
													},
													"logStorageSettings": {
														"linkedServiceName": {
															"referenceName": "LS_Multi_file",
															"type": "LinkedServiceReference"
														},
														"path": "raw/triggerdata"
													},
													"enableLogging": true,
													"storeSettings": {
														"type": "AzureBlobFSReadSettings",
														"recursive": true,
														"wildcardFileName": {
															"value": "@activity('Get Metadata1').output.itemName",
															"type": "Expression"
														},
														"enablePartitionDiscovery": false
													}
												}
											}
										]
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-12T11:42:31Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_ingest_MovieFile')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data Movies",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "HttpReadSettings",
									"requestMethod": "GET"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings",
									"copyBehavior": "FlattenHierarchy"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".csv"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Http_Source_csv",
								"type": "DatasetReference",
								"parameters": {
									"SourceBaseUrl": "https://raw.githubusercontent.com",
									"SourceRelativeUrl": "akjainade/akjain-adf/master/moviesDB.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Input_csv",
								"type": "DatasetReference",
								"parameters": {
									"container": "silver"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_send_attachment')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_attach_file",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach file",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Set variable1",
									"type": "SetVariable",
									"dependsOn": [],
									"policy": {
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"variableName": "filefullpath",
										"value": {
											"value": "@concat('/error-log/',item().name)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Web1",
									"type": "WebActivity",
									"dependsOn": [
										{
											"activity": "Set variable1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"method": "POST",
										"headers": {
											"Content-Type": "application/json"
										},
										"linkedServices": [
											{
												"referenceName": "LS_attach_file",
												"type": "LinkedServiceReference"
											}
										],
										"datasets": [
											{
												"referenceName": "DS_attach_file",
												"type": "DatasetReference",
												"parameters": {}
											}
										],
										"url": "https://prod-11.northcentralus.logic.azure.com:443/workflows/ae6c34d1e83d4584ac09df04ac1dbfff/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=VS78bGr5BBPvV5CTk2EGWor8trFjmB5ez9d01Cferhc",
										"body": {
											"value": "{\"PipeLineName\":\"@{pipeline().Pipeline}\",\n\"ADF\":\"@{pipeline().DataFactory}\",\n\"PipeLineRunid\":\"@{pipeline().RunId}\"}",
											"type": "Expression"
										}
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"variables": {
					"filefullpath": {
						"type": "String"
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-11T17:29:01Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/PL_two_files_dianamic_mapping')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata bring file names",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Source",
								"type": "DatasetReference",
								"parameters": {
									"p_folder": "triggerdata",
									"container": "raw"
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"modifiedDatetimeStart": null,
								"modifiedDatetimeEnd": null,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					},
					{
						"name": "ForEach file",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata bring file names",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata bring file names').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data dynamic",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"modifiedDatetimeStart": null,
												"modifiedDatetimeEnd": null,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings",
												"copyBehavior": "PreserveHierarchy"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".csv"
											}
										},
										"enableStaging": false,
										"translator": {
											"value": "@if(contains(item().name,'sales'),pipeline().parameters.p_mapping1,pipeline().parameters.p_mapping2)",
											"type": "Expression"
										}
									},
									"inputs": [
										{
											"referenceName": "DS_Source",
											"type": "DatasetReference",
											"parameters": {
												"p_folder": "triggerdata",
												"container": "raw"
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_Source",
											"type": "DatasetReference",
											"parameters": {
												"p_folder": "dianamic",
												"container": "silver"
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"parameters": {
					"p_mapping2": {
						"type": "object",
						"defaultValue": {
							"type": "TabularTranslator",
							"mappings": [
								{
									"source": {
										"name": "ID",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "ID",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Type",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Type",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "SKU",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "SKU",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Name",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Name",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Published",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Published",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Is featured?",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Is featured?",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Visibility in catalog",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Visibility in catalog",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Short description",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Short description",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Description",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Description",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Date sale price starts",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Date sale price starts",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Date sale price ends",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Date sale price ends",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Tax status",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Tax status",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Tax class",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Tax class",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "In stock?",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "In stock?",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Stock",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Stock",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Backorders allowed?",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Backorders allowed?",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Sold individually?",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Sold individually?",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Weight (lbs)",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Weight (lbs)",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Length (in)",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Length (in)",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Width (in)",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Width (in)",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Height (in)",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Height (in)",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Allow customer reviews?",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Allow customer reviews?",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Purchase note",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Purchase note",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Sale price",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Sale price",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Regular price",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Regular price",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Categories",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Categories",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Tags",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Tags",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Shipping class",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Shipping class",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Images",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Images",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Download limit",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Download limit",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Download expiry days",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Download expiry days",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Parent",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Parent",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Grouped products",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Grouped products",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Upsells",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Upsells",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Cross-sells",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Cross-sells",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "External URL",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "External URL",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Button text",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Button text",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Position",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Position",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Attribute 1 name",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Attribute 1 name",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Attribute 1 value(s)",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Attribute 1 value(s)",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Attribute 1 visible",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Attribute 1 visible",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Attribute 1 global",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Attribute 1 global",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Attribute 2 name",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Attribute 2 name",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Attribute 2 value(s)",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Attribute 2 value(s)",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Attribute 2 visible",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Attribute 2 visible",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Attribute 2 global",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Attribute 2 global",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Meta: _wpcom_is_markdown",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Meta: _wpcom_is_markdown",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Download 1 name",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Download 1 name",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Download 1 URL",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Download 1 URL",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Download 2 name",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Download 2 name",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "Download 2 URL",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "Download 2 URL",
										"type": "String",
										"physicalType": "String"
									}
								}
							],
							"typeConversion": true,
							"typeConversionSettings": {
								"allowDataTruncation": true,
								"treatBooleanAsNumber": false
							}
						}
					},
					"p_mapping1": {
						"type": "object",
						"defaultValue": {
							"type": "TabularTranslator",
							"mappings": [
								{
									"source": {
										"name": "ORDERNUMBER",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "ORDERNUMBER",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "QUANTITYORDERED",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "QUANTITYORDERED",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "PRICEEACH",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "PRICEEACH",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "ORDERLINENUMBER",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "ORDERLINENUMBER",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "SALES",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "SALES",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "ORDERDATE",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "ORDERDATE",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "STATUS",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "STATUS",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "QTR_ID",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "QTR_ID",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "MONTH_ID",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "MONTH_ID",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "YEAR_ID",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "YEAR_ID",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "PRODUCTLINE",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "PRODUCTLINE",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "MSRP",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "MSRP",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "PRODUCTCODE",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "PRODUCTCODE",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "CUSTOMERNAME",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "CUSTOMERNAME",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "PHONE",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "PHONE",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "ADDRESSLINE1",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "ADDRESSLINE1",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "ADDRESSLINE2",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "ADDRESSLINE2",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "CITY",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "CITY",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "STATE",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "STATE",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "POSTALCODE",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "POSTALCODE",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "COUNTRY",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "COUNTRY",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "TERRITORY",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "TERRITORY",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "CONTACTLASTNAME",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "CONTACTLASTNAME",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "CONTACTFIRSTNAME",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "CONTACTFIRSTNAME",
										"type": "String",
										"physicalType": "String"
									}
								},
								{
									"source": {
										"name": "DEALSIZE",
										"type": "String",
										"physicalType": "String"
									},
									"sink": {
										"name": "DEALSIZE",
										"type": "String",
										"physicalType": "String"
									}
								}
							],
							"typeConversion": true,
							"typeConversionSettings": {
								"allowDataTruncation": true,
								"treatBooleanAsNumber": false
							}
						}
					}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-12T20:19:26Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_SINK_SQLDBA_DF')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ONPREM_SQLDBA",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_onprem_ss')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_Source_onprem_Sqlserver",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "customer_id",
						"type": "int",
						"precision": 10
					},
					{
						"name": "first_name",
						"type": "nvarchar"
					},
					{
						"name": "last_name",
						"type": "nvarchar"
					},
					{
						"name": "email",
						"type": "nvarchar"
					},
					{
						"name": "created_at",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "updated_at",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Customers"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Conditional_Split')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_ConditionalSplit",
								"type": "DatasetReference"
							},
							"name": "sourceconditionalsplit"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SINK_DF",
								"type": "DatasetReference"
							},
							"name": "sinkUSAUK"
						},
						{
							"dataset": {
								"referenceName": "DS_SINK_DF",
								"type": "DatasetReference"
							},
							"name": "sink2USAIND"
						},
						{
							"dataset": {
								"referenceName": "DS_SINK_DF",
								"type": "DatasetReference"
							},
							"name": "sink3Default"
						}
					],
					"transformations": [
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Row as short,",
						"          Country as string,",
						"          Year as integer,",
						"          Product_Type as string,",
						"          Sales as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceconditionalsplit",
						"sourceconditionalsplit split(Country == 'USA' || Country == 'UK',",
						"     Country == 'USA' || Country == 'IND',",
						"     disjoint: true) ~> split1@(USAUK, USAIND, Default)",
						"split1@USAUK sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['USAUK.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkUSAUK",
						"split1@USAIND sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['USAIND.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink2USAIND",
						"split1@Default sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['ALL_Countries.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink3Default"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Data_Flow_Aggregation2002')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Sales_DF",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Sink_Database",
								"type": "DatasetReference"
							},
							"name": "sink1aggregatedata"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Country as string,",
						"          Year as short,",
						"          Product_Type as string,",
						"          Sales as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 aggregate(groupBy(Country),",
						"     MaxSales = max(Sales),",
						"          MinSales = min(Sales),",
						"          AvgSales = avg(Sales),",
						"          CountSales = count(Sales)) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     recreate:true,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1aggregatedata"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_Exists')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Exxists_1",
								"type": "DatasetReference"
							},
							"name": "source1exist"
						},
						{
							"dataset": {
								"referenceName": "DS_UNION_2",
								"type": "DatasetReference"
							},
							"name": "source2exists"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_Sink_exists",
								"type": "DatasetReference"
							},
							"name": "sink1exists"
						}
					],
					"transformations": [
						{
							"name": "exists1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          EmployeeID as integer,",
						"          EmployeeName as string,",
						"          Address as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1exist",
						"source(output(",
						"          EmployeeID as integer,",
						"          EmployeeName as string,",
						"          Address as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source2exists",
						"source1exist, source2exists exists(source1exist@EmployeeID == source2exists@EmployeeID,",
						"     negate:false,",
						"     broadcast: 'auto')~> exists1",
						"exists1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SaleID as string,",
						"          { CustomerID} as string,",
						"          { SaleDate} as string,",
						"          { ProductID} as string,",
						"          { Quantity} as string,",
						"          { UnitPrice} as string,",
						"          { TotalAmount} as string,",
						"          CustomerID as string,",
						"          { CustomerName} as string,",
						"          { Email} as string,",
						"          { Phone} as string,",
						"          { Address} as string",
						"     ),",
						"     partitionFileNames:['Sinkexists.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1exists"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/DF_First')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_Source_DF",
								"type": "DatasetReference"
							},
							"name": "SalesData"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_SINK_DF",
								"type": "DatasetReference"
							},
							"name": "sinksales"
						}
					],
					"transformations": [
						{
							"name": "filtertrasformation"
						},
						{
							"name": "selecttrasforamtion"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Country as string,",
						"          Year as integer,",
						"          Product_Type as string,",
						"          Sales as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> SalesData",
						"SalesData filter(Country == 'USA' && Product_Type  == 'electronics') ~> filtertrasformation",
						"filtertrasformation select(mapColumn(",
						"          Country,",
						"          Year,",
						"          Sales",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selecttrasforamtion",
						"selecttrasforamtion sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Salesdata.csv'],",
						"     truncate: true,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinksales"
					]
				}
			},
			"dependsOn": []
		}
	]
}