{
	"name": "DF_Pivot",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DS_SQLDBA_Dev",
						"type": "DatasetReference"
					},
					"name": "source1Pivot"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DS_Sink_pivot",
						"type": "DatasetReference"
					},
					"name": "sink1pivot"
				}
			],
			"transformations": [
				{
					"name": "pivot1transformation"
				},
				{
					"name": "derivedColumn1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ProductID as integer,",
				"          Name as string,",
				"          ProductNumber as string,",
				"          Color as string,",
				"          StandardCost as decimal(19,4),",
				"          ListPrice as decimal(19,4),",
				"          Size as string,",
				"          Weight as decimal(8,2),",
				"          ProductCategoryID as integer,",
				"          ProductModelID as integer,",
				"          SellStartDate as timestamp,",
				"          SellEndDate as timestamp,",
				"          DiscontinuedDate as timestamp,",
				"          ThumbNailPhoto as binary,",
				"          ThumbnailPhotoFileName as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1Pivot",
				"derivedColumn1 pivot(groupBy(Size),",
				"     pivotBy(Color),",
				"     avg = avg(StandardCost),",
				"     columnNaming: '$N_$V_is calculated',",
				"     lateral: true) ~> pivot1transformation",
				"source1Pivot derive(Color = iif(isNull(Color) || Color == 'NULL', 'NA',Color),",
				"          Size = iif(isNull(Size) || Size == 'NULL', 'NA',Size)) ~> derivedColumn1",
				"pivot1transformation sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['PivotData.csv'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1pivot"
			]
		}
	}
}